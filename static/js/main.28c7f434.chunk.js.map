{"version":3,"sources":["data/Buses.js","utils/env.js","utils/time.js","ui/BusesTimes.js","ui/CurBusesTimes.js","ui/Select/SelectComponent.jsx","utils/Stations.js","ui/Stations/StationsComponent.jsx","ui/Buses/BusesComponent.jsx","utils/Buses.js","ui/SpecificPanel/SpecificPanelComponent.jsx","services/Service.js","services/Keyboard.js","services/Gps.js","ui/ChoseBox.js","ui/InputChoseBox.js","ui/Loader/Loader.jsx","ui/RoutePanel.js","App.js","utils/GA.js","registerServiceWorker.js","index.js"],"names":["BASE_URL","stationUrl","allBusesUrl","busesTimePrefixUrl","busesTimeSuffixUrl","fetchFromServer","url","fetch","then","result","ok","Error","busesToValidJson","arr","map","value","id","number","label","bus","destination","stationsToValidJson","json","name","lat","lon","stationBusesHash","stationId","busId","busesTimeHash","time","count","Buses","allStationsPromise","stationsPromise","busesIds","join","val","busesTimeToValidJson","text","res","parseInt","originPlace","destinationPlace","md","MobileDetect","window","navigator","userAgent","isMobile","mobile","timeToString","d","Date","setUTCSeconds","pad","getUTCHours","getUTCMinutes","BusesTimes","props","state","busesTimes","fullData","isShowBusesCount","this","getBusesTimes","setState","catch","reason","console","log","updateBusData","prevProps","className","busNumber","filterBuses","filter","filterTimeStart","filterTimeEnd","busTimeToString","buses","sum","newBuses","avg","push","busTime","busCount","isShowCount","baseString","Component","CurBusesTimes","curTime","autoRefresh","refreshInterval","setInterval","getBusesCurTimes","clearInterval","preStation","postStation","stationName","SelectComponent","items","maxShownItems","isMulti","placeholder","emptyFilterValue","filterFunction","onOpen","onClose","onValueChange","onInputChange","inputChange","input","action","maxHeight","options","maxMenuHeight","noOptionsMessage","onChange","filterOption","onMenuOpen","onMenuClose","hideSelectedOptions","isRtl","a","DataBuses","getAllStations","filterStation","station","term","indexOf","replace","createLocation","StationsComponent","stations","useState","selectedStations","setSelectedStations","useEffect","length","filterFunctions","busesPromise","getStationBuses","Promise","all","reduce","acc","index","concat","SpecificPanelComponent","onDataChanged","stationValue","setStationValue","setBuses","busValue","setBusValue","updateData","find","st","originStation","changeBuses","newBusValues","v","some","readBusesData","Service","callbacks","callback","splice","Keyboard","keyboard","hasKeyboard","Gps","location","errorReason","geolocation","getCurrentPosition","position","coords","latitude","longitude","onChanged","ChoseBox","object","search","stringMatch","objectReplacement","replacement","from","to","searchReplacement","numOfOptions","noValue","onSelectedChanged","selectOpened","selectClosed","multi","selectFilter","bind","inp","undefined","str","match","InputChoseBox","selectedItem","newItems","item","includes","setHasKeyboard","LoaderComponent","isLoading","src","RoutePanel","destinationStation","moment","routeCalculationId","getRoutes","createTime","jsonRoutesArray","data","stop","getStationData","originStationId","destinationStationId","destinationTime","originTime","calcRoute","setData","_prevProps","prevState","getRoute","showSecond","use12Hours","preVal","diff","startOf","App","ReactGA","initialize","testMode","pageview","pathname","busesData","isRoute","startTime","endTime","appError","gps","resolve","reject","stationsByDistance","slice","sort","b","getDistance","sortByDistanceInPlace","err","keyboardCallback","forceUpdate","gpsCallback","getErrorReason","addCallback","removeCallback","getTimeFromPicker","defaultValue","strArr","format","split","headerClasses","classNames","message","createError","checked","screen","event","category","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","width","disabledHours","timeToHour","disabledMinutes","h","timeToMinute","oName","dName","stationBuses","Map","forEach","get","set","keys","Array","printBusesTimes","Math","trunc","hour","isLocalhost","Boolean","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.28c7f434.chunk.js","sourcesContent":["const BASE_URL = 'https://amitnew.eastus2.cloudapp.azure.com:44346/';\nconst stationUrl = BASE_URL + 'stations';\nconst allStationUrl = BASE_URL + 'station';\nconst allBusesUrl = BASE_URL + 'buses';\nconst busesUrl = stationUrl + '/';\nconst busesStationUrl = allBusesUrl + '/';\nconst busesTimePrefixUrl = stationUrl + '/';\nconst busesTimeSuffixUrl = '/bus/';\nconst busesCurTimeUrl = '/time';\nfunction fetchFromServer(url) {\n    return fetch(url).then(result => {\n        if (result.ok) {\n            return result;\n        } else {\n            throw new Error('Network response was not ok.');\n        }\n    });\n}\nfunction createLabelForBus(bus) {\n    return bus.destination != null ? `${bus.number} ל${bus.destination}` : bus.number\n}\nfunction busesToValidJson(arr) {\n    return arr.map(value => {\n        return { id: value.id, value: value.id, number: value.number, label: createLabelForBus(value), destination: value.destination }\n    });\n}\nfunction stationsToValidJson(json) {\n    return json.map(value => {\n        return { id: value.id, value: value.id, name: value.name, label: value.id + '(' + value.name + ')', lat: value.lat, lon: value.lon }\n    });\n}\nexport function stationBusesHash(stationId, busId) {\n    return (stationId << 16) | busId;\n}\nfunction busesTimeHash(stationId, busId, time, count) {\n    return ((time << 16) | count) ^ stationBusesHash(stationId, busId)\n}\n\nclass Buses {\n    static allStationsPromise = null\n    static stationsPromise = null\n    static getAllStations() {\n        if (Buses.allStationsPromise === null) {\n            Buses.allStationsPromise = fetchFromServer(allStationUrl).then(result => result.json()).then(json => stationsToValidJson(json))\n        }\n        return Buses.allStationsPromise\n    }\n    static getStations() {\n        if (Buses.stationsPromise === null) {\n            Buses.stationsPromise = fetchFromServer(stationUrl).then(result => result.json()).then(json => stationsToValidJson(json))\n        }\n        return Buses.stationsPromise\n    }\n\n    static getBuses() {\n        return fetchFromServer(allBusesUrl).then(result => result.json()).then(json => busesToValidJson(json))\n    }\n\n    static getBusesStations(busesIds) {\n        const fetchUrl = busesStationUrl + busesIds.join(\",\");\n        return fetchFromServer(fetchUrl).then(result => result.json()).then(json => stationsToValidJson(json))\n    }\n\n    static getStationBuses(stationId) {\n        const fetchUrl = busesUrl + stationId;\n        return fetchFromServer(fetchUrl).then(result => result.json()).then(json => busesToValidJson(json));\n    }\n\n\n    static getBusesTimes(stationId, busId) {\n        const fetchUrl = busesTimePrefixUrl + stationId + busesTimeSuffixUrl + busId;\n        const busesTimeToValidJson = (json) => {\n            return json.map(val => {\n                return { id: busesTimeHash(stationId, busId, val.time, val.count), time: val.time, count: val.count }\n            })\n        };\n        return fetchFromServer(fetchUrl).then(result => result.json()).then(json => busesTimeToValidJson(json));\n    }\n\n    static getBusesCurTimes(stationId, busId) {\n        const fetchUrl = busesTimePrefixUrl + stationId + busesTimeSuffixUrl + busId + busesCurTimeUrl;\n        return fetchFromServer(fetchUrl).then(result => result.text()).then(res => {\n            if (res !== '') {\n                res = parseInt(res, 10)\n            }\n            return res\n        });\n    }\n    static getRoutes(originPlace, destinationPlace, time) {\n        const fetchUrl = `${BASE_URL}routes/${originPlace}/${destinationPlace}/${time}/route`\n        return fetchFromServer(fetchUrl).then(result => result.json())\n    }\n}\n\nexport default Buses","import MobileDetect from 'mobile-detect';\n\nconst md = new MobileDetect(window.navigator.userAgent);\n\nexport function isMobile() {\n    return md.mobile();\n}\n\nexport function windowSize() {\n    return [window.innerWidth, window.innerHeight];\n}","function timeToString(time) {\n    let d = new Date(0);\n    d.setUTCSeconds(time);\n    return pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes());\n}\nfunction pad(d) {\n    if (d < 10) {\n        return '0' + d;\n    }\n    else {\n        return d;\n    }\n}\nexport { timeToString }","import React, { Component } from \"react\"\nimport Buses from \"../data/Buses\";\nimport { isMobile } from \"../utils/env\";\nimport { timeToString } from \"../utils/time\";\nclass BusesTimes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            busesTimes: [],\n            fullData: false,\n            isShowBusesCount: false\n        };\n    }\n\n    static filterBuses(fullData, buses) {\n        if (fullData) {\n            return buses;\n        }\n        let sum = 0;\n        let count = 0;\n        for (let bus of buses) {\n            sum += bus.count;\n            count++;\n        }\n        let newBuses = [];\n        const avg = (sum / count) / 2;\n        for (let bus of buses) {\n            if (bus.count > avg) {\n                newBuses.push(bus)\n            }\n        }\n        return newBuses;\n    }\n\n    static busTimeToString(busTime, busCount, isShowCount) {\n        let baseString = timeToString(busTime);\n        if (!isMobile() && isShowCount) {\n            baseString += ` והגיע בשעה הזו ${busCount} פעמים`;\n        }\n        return baseString;\n    }\n\n    updateBusData() {\n        if (this.props.stationId !== null && this.props.busId != null) {\n            Buses.getBusesTimes(this.props.stationId, this.props.busId).then(busesTimes => this.setState({ busesTimes })).catch(reason => console.log(reason));\n        }\n    }\n\n    componentDidMount() {\n        this.updateBusData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.stationId !== prevProps.stationId || this.props.busId !== prevProps.busId) {\n            this.setState({ busesTimes: [] });\n            this.updateBusData();\n        }\n    }\n\n    render() {\n        return (\n            <div className='Buses-times'>\n                <h4>קו {this.props.busNumber}</h4>\n                <label className='Buses-times-list-desc'>האוטובוס אמור להגיע בשעות הבאות:</label>\n                <br />\n                <div className='Arrow-up'>></div>\n                <ul className='Buses-times-list'>\n                    {BusesTimes.filterBuses(this.state.fullData, this.state.busesTimes).filter(value => value.time >= this.props.filterTimeStart && value.time <= this.props.filterTimeEnd).map(value =>\n                        <li className={!isMobile() ? 'Buses-times-list-desktop' : ''}\n                            key={value.id}>{BusesTimes.busTimeToString(value.time, value.count, this.state.isShowBusesCount)}</li>)}\n                </ul>\n                <div className='Arrow-down'>></div>\n            </div>\n        )\n    }\n}\n\nexport default BusesTimes;","import React, {Component} from \"react\"\nimport Buses from \"../data/Buses\";\n\nclass CurBusesTimes extends Component {\n    constructor(props) {\n        const REFRESH_TIMEOUT = 10000;\n        super(props);\n        this.state = {\n            curTime: null,\n            fullData: false\n        };\n        if (this.props.autoRefresh == null || this.props.autoRefresh === true) {\n            this.refreshInterval = setInterval(() => {\n                this.updateBusData();\n            }, REFRESH_TIMEOUT);\n        }\n    }\n\n    updateBusData() {\n        if (this.props.stationId !== null && this.props.busId != null) {\n            Buses.getBusesCurTimes(this.props.stationId, this.props.busId).then(curTime => this.setState({ curTime })).catch(reason => {\n                console.log(reason)\n                this.setState({ curTime: null })\n            });\n        }\n    }\n\n    componentDidMount() {\n        this.updateBusData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.stationId !== prevProps.stationId || this.props.busId !== prevProps.busId) {\n            this.setState({curTime: null});\n            this.updateBusData();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.refreshInterval != null) {\n            clearInterval(this.refreshInterval);\n        }\n    }\n\n    render() {\n        const preBus = 'קו ';\n        let preStation;\n        let postStation;\n        if (this.state.curTime === \"\") {\n            preStation = ' לא אמור להגיע ל ';\n            postStation = ' בקרוב'\n        }\n        else {\n            preStation = ' מגיע לתחנת ';\n            if (this.state.curTime === 0) {\n                postStation = ' עכשיו';\n            }\n            else if (this.state.curTime === 1) {\n                postStation = ' בעוד כדקה';\n            }\n            else {\n                postStation = ' בעוד כ ' + this.state.curTime + ' דקות';\n            }\n        }\n        return (\n            this.state.curTime != null ?\n                <div>{preBus}<b>{this.props.busNumber}</b>{preStation}<b>{this.props.stationName}</b>{postStation}\n                </div> : null\n        )\n    }\n}\n\nexport default CurBusesTimes;","import React from 'react';\nimport Select from \"react-select\";\nconst SIZE_OF_OPTION = 34;\nconst LAST_OPTION_MARGIN = 14;\nexport default function SelectComponent({ items, value, maxShownItems, isMulti, placeholder, emptyFilterValue, filterFunction, onOpen, onClose, onValueChange, onInputChange }) {\n    const inputChange = onInputChange && ((input, action) => {\n        if (action.action === \"input-change\") {\n            onInputChange(input);\n        }\n    });\n    maxShownItems = maxShownItems || 4;\n    const maxHeight = maxShownItems * SIZE_OF_OPTION + LAST_OPTION_MARGIN;\n    return <Select\n        options={items || []}\n        value={value}\n        maxMenuHeight={maxHeight}\n        placeholder={placeholder}\n        noOptionsMessage={() => emptyFilterValue}\n        onInputChange={inputChange}\n        onChange={onValueChange}\n        isMulti={isMulti}\n        filterOption={filterFunction}\n        onMenuOpen={onOpen}\n        onMenuClose={onClose}\n        hideSelectedOptions={true}\n        isRtl={true}\n    />\n}","import { default as DataBuses } from '../data/Buses';\nimport { getDistance } from 'geolib';\nexport async function getAllStations() {\n    return await DataBuses.getAllStations();\n}\nexport function filterStation(station, term) {\n    const { label } = station;\n    return label.indexOf(term) !== -1 || label.replace('.ת', 'תחנה').indexOf(term) !== -1 || label.replace('ת.', 'ת').indexOf(term) !== -1 || label.indexOf(term.replace('ת ', 'ת.')) !== -1;\n}\nexport function sortByDistanceInPlace(stations, location) {\n    stations.sort((a, b) => {\n        const aDis = getDistance(location, createLocation(a.lat, a.lon));\n        const bDis = getDistance(location, createLocation(b.lat, b.lon));\n        return aDis - bDis;\n    });\n}\nfunction createLocation(lat, lon) {\n    return { lat: lat, lon: lon };\n}","import React, { useState, useEffect } from 'react';\nimport SelectComponent from '../Select/SelectComponent';\nimport { filterStation } from '../../utils/Stations';\nimport { isMobile } from '../../utils/env';\nexport default function StationsComponent({ stations, onInputChange, onValueChange, ...props }) {\n    const [selectedStations, setSelectedStations] = useState(null);\n    useEffect(() => {\n        setSelectedStations(null);\n    }, [stations])\n    const inputChanged = input => {\n        if (input.length <= 2) {\n            setSelectedStations(null);\n        } else {\n            setSelectedStations(stations && stations.filter(station => filterStation(station, input)));\n        }\n        onInputChange && onInputChange(input);\n    };\n    const valueChange = stations => {\n        setSelectedStations(null);\n        onValueChange && onValueChange(stations);\n    }\n    return <SelectComponent\n        items={selectedStations}\n        onInputChange={inputChanged}\n        onValueChange={valueChange}\n        maxShownItems={isMobile() ? 4 : 7}\n        placeholder='בחר תחנה'\n        emptyFilterValue='הקלד כדי לחפש'\n        filterFunctions={filterStation}\n        {...props}\n    />\n}","import React from 'react';\nimport SelectComponent from '../Select/SelectComponent'\nimport { isMobile } from '../../utils/env'\nexport default function StationsComponent({ buses, ...props }) {\n    return <SelectComponent\n        items={buses}\n        maxShownItems={isMobile() ? 4 : 7}\n        placeholder='בחר קו'\n        emptyFilterValue='אין קוים'\n        {...props}\n    />\n}","import { default as DataBuses } from '../data/Buses';\nexport async function readBusesData(stations) {\n    const busesPromise = stations.map(station => DataBuses.getStationBuses(station.id));\n    const buses = await Promise.all(busesPromise);\n    return stations.reduce((acc, station, index) => {\n        return acc.concat(buses[index].map(bus => {\n            return { ...bus, stationId: station.id };\n        }));\n    }, []);\n}","import React, { useState } from 'react';\nimport StationsComponent from '../Stations/StationsComponent';\nimport BusesComponent from '../Buses/BusesComponent';\nimport { readBusesData } from '../../utils/Buses';\nexport default function SpecificPanelComponent({ stations, onDataChanged }) {\n    const [stationValue, setStationValue] = useState(null);\n    const [buses, setBuses] = useState(null);\n    const [busValue, setBusValue] = useState(null);\n    const updateData = (stations, buses) => {\n        onDataChanged(buses && buses.filter(bus => bus.stationId).map(bus => {\n            const station = stations.find(st => st.id === bus.stationId);\n            return station && { originStation: station, bus };\n        }));\n    };\n    const changeBuses = buses => {\n        setBuses(buses);\n        const newBusValues = buses ? busValue.filter(v => buses.some(bus => v.id === bus.id)) : null;\n        setBusValue(newBusValues);\n        updateData(stations, newBusValues);\n    };\n    const onStationsChanged = (stations) => {\n        setStationValue(stations);\n        if (stations) {\n            readBusesData(stations).then(buses => setBuses(buses));\n            buses && changeBuses(buses.filter(bus => stations.some(st => st.id === bus.stationId)));\n        } else {\n            changeBuses(null);\n        }\n    };\n    const onBusesChanged = buses => {\n        setBusValue(buses);\n        updateData(stations, buses);\n    };\n    return (\n        <div>\n            <p className='App-intro'>\n                בחרו תחנה ומספר קו והזמנים יופיעו למטה\n                    </p>\n            <StationsComponent stations={stations} value={stationValue} onValueChange={onStationsChanged} isMulti={true} />\n            <BusesComponent buses={buses} value={busValue} onValueChange={onBusesChanged} isMulti={true} />\n        </div>\n    )\n}","export default class Service {\n    constructor() {\n        this.callbacks = []\n    }\n    addCallback(callback) {\n        this.callbacks.push(callback)\n    }\n    removeCallback(callback) {\n        var index = this.callbacks.indexOf(callback)\n        if (index > -1) {\n            this.callbacks.splice(index, 1)\n        }\n    }\n    onChanged(val) {\n        for (let callback of this.callbacks) {\n            callback(val)\n        }\n    }\n}","import Service from \"./Service\";\n\nexport default class Keyboard extends Service {\n    constructor() {\n        super()\n        this.keyboard = false\n    }\n    hasKeyboard() {\n        return this.keyboard\n    }\n    setHasKeyboard(hasKeyboard) {\n        if (hasKeyboard !== this.keyboard) {\n            super.onChanged(hasKeyboard)\n            this.keyboard = hasKeyboard\n        }\n    }\n}","import Service from \"./Service\";\nexport function getLocation() {\n    return new Promise((resolve, reject) => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    resolve({ lat: position.coords.latitude, lon: position.coords.longitude });\n                },\n                () => {\n                    reject(new Error(\"מיקום אינו זמין\"));\n                }\n            )\n        } else {\n            reject(new Error(\"מיקום אינו זמין\"));\n        }\n    });\n}\nexport default class Gps extends Service {\n    constructor() {\n        super()\n        this.location = null\n        this.errorReason = null\n    }\n    calcLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                position => {\n                    this.location = { lat: position.coords.latitude, lon: position.coords.longitude }\n                    this.onChanged(this.location)\n                },\n                () => {\n                    this.errorReason = new Error(\"מיקום אינו זמין\")\n                    this.onChanged(null)\n                }\n            )\n        } else {\n            this.errorReason = new Error(\"מיקום אינו זמין\")\n        }\n    }\n    isLocationOk() {\n        return this.errorReason === null\n    }\n    getErrorReason() {\n        return this.errorReason\n    }\n    getLocation() {\n        return this.location\n    }\n}","import { Component } from \"react\"\nimport React from \"react\";\nimport Select from \"react-select\";\n\nclass ChoseBox extends Component {\n    static stringMatch(str, match) {\n        return str.indexOf(match) !== -1;\n    }\n\n    selectFilter(object, search) {\n        if (ChoseBox.stringMatch(object.label, search)) {\n            return true;\n        }\n        else {\n            if (this.props.objectReplacement != null) {\n                for (let replacement of this.props.objectReplacement) {\n                    let from = replacement.from;\n                    let to = replacement.to;\n                    if (ChoseBox.stringMatch(object.label.replace(from, to), search)) {\n                        return true;\n                    }\n                }\n            }\n            if (this.props.searchReplacement != null) {\n                for (let replacement of this.props.searchReplacement) {\n                    let from = replacement.from;\n                    let to = replacement.to;\n                    if (ChoseBox.stringMatch(object.label, search.replace(from, to))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    render() {\n        let numOfOptions = 4;\n        let SIZE_OF_OPTION = 34;\n        let LAST_OPTION_MARGIN = 14;\n        if (this.props.numOfOptions != null) {\n            numOfOptions = this.props.numOfOptions;\n        }\n        const inputChange = (inp, action) => {\n            if (action.action === \"input-change\" && this.props.onInputChange !== undefined) {\n                this.props.onInputChange(inp)\n            }\n        };\n        return (\n            this.props.items !== null &&\n            <Select\n                maxMenuHeight={numOfOptions * SIZE_OF_OPTION + LAST_OPTION_MARGIN}\n                options={this.props.items}\n                placeholder={this.props.noValue}\n                onChange={this.props.onSelectedChanged}\n                noOptionsMessage={() => this.props.emptyFilterValue}\n                onMenuOpen={this.props.selectOpened}\n                onMenuClose={this.props.selectClosed}\n                value={this.props.value}\n                isMulti={this.props.multi}\n                hideSelectedOptions={true}\n                isRtl={true}\n                filterOption={this.selectFilter.bind(this)}\n                onInputChange={inputChange}\n            />\n        )\n    }\n}\n\nexport default ChoseBox;","import React, { Component } from \"react\"\nimport ChoseBox from \"./ChoseBox\";\nimport { isMobile } from \"../utils/env\";\nexport default class InputChoseBox extends Component {\n    constructor() {\n        super()\n        this.state = {\n            items: [],\n            selectedItem: null\n        }\n    }\n    render() {\n        const inputChanged = (input) => {\n            if (input.length <= 2) {\n                if (this.state.items.length > 0) {\n                    this.setState({ items: [], selectedItem: null })\n                }\n            } else {\n                let newItems = []\n                for (let item of this.props.items) {\n                    if (item.label.includes(input)) {\n                        newItems.push(item)\n                    }\n                }\n                this.setState({ items: newItems })\n            }\n        }\n        const openKeyboard = () => this.props.keyboard.setHasKeyboard(true)\n        const closeKeyboard = () => this.props.keyboard.setHasKeyboard(false)\n        return (\n            <ChoseBox\n                items={this.state.items}\n                onInputChange={inputChanged}\n                value={this.state.selectedItem}\n                onSelectedChanged={item => {\n                    this.setState({ selectedItem: item })\n                    this.props.onSelectedChanged(item)\n                }}\n                numOfOptions={isMobile() ? 4 : 7}\n                selectOpened={openKeyboard}\n                selectClosed={() => {\n                    closeKeyboard()\n                    if (this.state.selectedItem === null) {\n                        this.setState({ items: [] })\n                    }\n                }}\n                noValue={this.props.noValue}\n                emptyFilterValue='הקלד כדי לחפש'\n                multi={false}\n            />\n        )\n    }\n}","import React from 'react';\nexport default function LoaderComponent({ isLoading }) {\n    return isLoading ? <img src=\"loader.gif\" /> : <></>;\n}","import React, { Component } from \"react\"\nimport Buses from \"../data/Buses\";\nimport TimePicker from 'rc-time-picker'\nimport moment from 'moment'\nimport InputChoseBox from \"./InputChoseBox\";\nimport LoaderComponent from \"./Loader/Loader\";\nexport default class RoutePanel extends Component {\n    constructor() {\n        super()\n        this.state = {\n            stations: [],\n            originStation: null,\n            destinationStation: null,\n            time: moment(),\n            routeCalculationId: 0,\n            isLoading: false\n        }\n    }\n    componentDidMount() {\n        Buses.getAllStations().then(stations => this.setState({ stations: stations }))\n    }\n    static checkEqualNotNull(preVal, val) {\n        return val !== null && preVal !== val\n    }\n    getStationData(stationId) {\n        return this.state.stations.find(station => stationId === station.id)\n    }\n    async calcRoute(routeCalculationId) {\n        this.setState({ isLoading: true });\n        const jsonRoutesArray = await Buses.getRoutes(this.state.originStation.id, this.state.destinationStation.id, RoutePanel.createTime(this.state.time));\n        const data = [];\n        for (let stop of jsonRoutesArray) {\n            const bus = stop.busId && { id: stop.busId, label: stop.busNumber };\n            data.push({\n                originStation: this.getStationData(stop.originStationId),\n                destinationStation: this.getStationData(stop.destinationStationId), bus, destinationTime: stop.destinationTime, originTime: stop.originTime\n            });\n        }\n        if (this.state.routeCalculationId === routeCalculationId) {\n            this.setState({ isLoading: false });\n        }\n        return data;\n    }\n    getRoute() {\n        if (this.state.originStation && this.state.destinationStation && this.state.time) {\n            const routeCalculationId = this.state.routeCalculationId + 1;\n            this.setState({ routeCalculationId }, () => {\n                this.calcRoute(routeCalculationId).then(data => { this.props.setData(data); });\n            });\n        }\n    }\n    componentDidUpdate(_prevProps, prevState) {\n        if (prevState?.originStation?.id !== this.state?.originStation?.id ||\n            prevState?.destinationStation?.id !== this.state?.destinationStation?.id ||\n            prevState.time !== this.state.time) {\n            this.getRoute()\n        }\n    }\n    static createTime(time) {\n        if (time !== null) {\n            time = time.diff(moment().startOf('day'), 'seconds')\n        }\n        return time\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    <span>\n                        נקודת התחלה\n                    </span>\n                    <InputChoseBox\n                        items={this.state.destinationStation ? this.state.stations.filter(station => station.id !== this.state.destinationStation.id) : this.state.stations}\n                        keyboard={this.props.keyboard}\n                        onSelectedChanged={station => this.setState({ originStation: station })}\n                        noValue='בחר תחנה'\n                    />\n                </div>\n                <div>\n                    <span>\n                        נקודת סיום\n                    </span>\n                    <InputChoseBox\n                        items={this.state.originStation ? this.state.stations.filter(station => station.id !== this.state.originStation.id) : this.state.stations}\n                        keyboard={this.props.keyboard}\n                        onSelectedChanged={station => this.setState({ destinationStation: station })}\n                        noValue='בחר תחנה'\n                    />\n                </div>\n                <div>\n                    <span>\n                        זמן יציאה\n                    </span>\n                    <TimePicker\n                        showSecond={false}\n                        onChange={time => this.setState({ time: time })}\n                        use12Hours={false}\n                        value={this.state.time}\n                    />\n                </div>\n                <LoaderComponent isLoading={this.state.isLoading} />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport BusesTimes from \"./ui/BusesTimes\";\nimport { isMobile } from './utils/env'\nimport classNames from 'classnames';\nimport { initializeGA, changeScreen } from \"./utils/GA\";\nimport { stationBusesHash } from \"./data/Buses\";\nimport TimePicker from 'rc-time-picker'\nimport 'rc-time-picker/assets/index.css';\nimport CurBusesTimes from \"./ui/CurBusesTimes\";\nimport SpecificPanelComponent from './ui/SpecificPanel/SpecificPanelComponent';\nimport { getAllStations, sortByDistanceInPlace } from \"./utils/Stations\";\nimport Keyboard from './services/Keyboard';\nimport Gps, { getLocation } from './services/Gps';\nimport Switch from 'react-switch'\nimport RoutePanel from './ui/RoutePanel';\nimport { timeToString } from \"./utils/time\";\nclass App extends Component {\n    constructor() {\n        super();\n        initializeGA();\n        this.isMobile = isMobile();\n        this.state = {\n            busesData: null,\n            isRoute: true,\n            startTime: 0,\n            endTime: 86400,\n            appError: null,\n\n            stations: null,\n        };\n        this.keyboard = new Keyboard()\n        this.gps = new Gps()\n    }\n    componentDidMount() {\n        getAllStations().then(stations => {\n            this.setState({ stations });\n            getLocation().then(location => {\n                const stationsByDistance = stations.slice();\n                sortByDistanceInPlace(stationsByDistance, location);\n                this.setState({ stations: stationsByDistance });\n            }).catch(err => this.setState({ appError: err }));\n        });\n        this.keyboardCallback = () => this.forceUpdate()\n        this.gpsCallback = (location) => {\n            if (location === null) {\n                this.setState({ appError: this.gps.getErrorReason() })\n            }\n        }\n        this.keyboard.addCallback(this.keyboardCallback)\n        this.gps.addCallback(this.gpsCallback)\n    }\n    componentWillUnmount() {\n        this.keyboard.removeCallback(this.keyboardCallback)\n        this.gps.removeCallback(this.gpsCallback)\n    }\n    static timeToHour(time) {\n        return Math.trunc(time / (60 * 60))\n    }\n\n    static timeToMinute(time, hour) {\n        return Math.trunc(time / 60 - hour * 60)\n    }\n    render() {\n        const printBusesTimes = () => {\n            const stationBuses = new Map();\n            this.state.busesData && this.state.busesData.forEach(data => {\n                const { originStation, bus } = data;\n                if (bus) {\n                    if (!stationBuses.get(originStation.id)) {\n                        stationBuses.set(originStation.id, []);\n                    }\n                    stationBuses.get(originStation.id).push({ originStation, bus });\n                }\n            });\n            const keys = Array.from(stationBuses.keys());\n            return keys.map(stationId => {\n                const data = stationBuses.get(stationId);\n                const stationName = data[0].originStation.name;\n                return (\n                    <div key={stationId}>\n                        {keys.length > 1 && <h3 className='Buses-times'>\n                            {stationName}\n                        </h3>}\n                        {\n                            data.map(({ bus }) =>\n                                <BusesTimes\n                                    key={stationBusesHash(stationId, bus.id)}\n                                    stationId={stationId}\n                                    busId={bus.id} busNumber={bus.label}\n                                    filterTimeStart={this.state.startTime} filterTimeEnd={this.state.endTime} />)\n                        }\n                    </div>\n                )\n            });\n        };\n        const printRoute = () => {\n            return this.state.busesData && (\n                <>\n                    <div>\n                        <h2>תיאור המסלול:</h2>\n                        {this.state.busesData.map(data => {\n                            const { destinationStation, originStation, bus = {}, originTime } = data;\n                            const { name: oName } = originStation;\n                            const { name: dName } = destinationStation;\n                            const { label } = bus;\n                            return (\n                                <div key={stationBusesHash(destinationStation.id)}>\n                                    {label ? <>סע באוטובוס <b>{label}</b> מתחנת <b>{oName}</b> לתחנת <b>{dName}</b> ויוצא בשעה {timeToString(originTime)}</> : <>לך מתחנת <b>{oName}</b> לתחנת <b>{dName}</b></>}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <br />\n                </>);\n        };\n        const printCurBusesTimes = () => {\n            return this.state.busesData && this.state.busesData.map(data => {\n                const { originStation, bus } = data;\n                return bus && (\n                    <CurBusesTimes\n                        key={stationBusesHash(originStation.id, bus.id)}\n                        stationId={originStation.id}\n                        busId={bus.id} busNumber={bus.label}\n                        stationName={originStation.name} />\n                );\n            });\n        };\n        const getTimeFromPicker = (time, defaultValue) => {\n            if (time === null) {\n                return defaultValue\n            }\n            let strTime = time.format(\"HH:mm\");\n            let strArr = strTime.split(\":\");\n            return (parseInt(strArr[0], 10) * 60 + parseInt(strArr[1], 10)) * 60\n        };\n        const createError = () => {\n            if (this.state.appError !== null) {\n                return <span className='Error'>{this.state.appError.message}</span>\n            }\n        }\n        const headerClasses = classNames('App-header', { 'App-header-shrink': isMobile() && this.keyboard.hasKeyboard() });\n        return (\n            <div className=\"App\">\n                <header className={headerClasses}>\n                    <h1 className=\"App-title\">זמני אוטובוס</h1>\n                </header>\n                {createError()}\n                <div>\n                    <label className=\"Switch-button\">חפש לפי מסלול</label>\n                    <Switch\n                        checked={this.state.isRoute}\n                        onChange={() => {\n                            changeScreen(this.state.isRoute ? 'real time by station' : 'route');\n                            this.setState({ isRoute: !this.state.isRoute, busesData: null });\n                        }}\n                        onColor=\"#86d3ff\"\n                        onHandleColor=\"#2693e6\"\n                        handleDiameter={30}\n                        uncheckedIcon={false}\n                        checkedIcon={false}\n                        boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                        activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                        height={20}\n                        width={48}\n                        className=\"Ltr-align\"\n                    />\n                </div>\n                {this.state.isRoute ? <RoutePanel\n                    setData={data => this.setState({ busesData: data })}\n                    keyboard={this.keyboard}\n                />\n                    : <SpecificPanelComponent\n                        stations={this.state.stations}\n                        onDataChanged={(data) => this.setState({ busesData: data })}\n                    />}\n                <label>סנן לפי זמן התחלה: </label>\n                <TimePicker\n                    className='Time-picker-filter'\n                    showSecond={false}\n                    onChange={(time) => this.setState({ startTime: getTimeFromPicker(time, 0) })}\n                    disabledHours={() => {\n                        const arr = [];\n                        for (let v = App.timeToHour(this.state.endTime) + 1; v < 24; v++) {\n                            arr.push(v)\n                        }\n                        return arr;\n                    }}\n                    disabledMinutes={(h) => {\n                        const arr = [];\n                        if (h === App.timeToHour(this.state.endTime)) {\n                            for (let v = App.timeToMinute(this.state.endTime, h) + 1; v < 60; v++) {\n                                arr.push(v)\n                            }\n                        }\n                        return arr;\n                    }}\n                />\n                <label> וזמן סיום: </label>\n                <TimePicker\n                    className='Time-picker-filter'\n                    showSecond={false}\n                    onChange={(time) => this.setState({ endTime: getTimeFromPicker(time, 86400) })}\n                    disabledHours={() => {\n                        const arr = [];\n                        for (let v = 0; v < App.timeToHour(this.state.startTime); v++) {\n                            arr.push(v)\n                        }\n                        return arr;\n                    }}\n                    disabledMinutes={(h) => {\n                        const arr = [];\n                        if (h === App.timeToHour(this.state.startTime)) {\n                            for (let v = 0; v < App.timeToMinute(this.state.startTime, h); v++) {\n                                arr.push(v)\n                            }\n                        }\n                        return arr;\n                    }}\n                />\n                {this.state.isRoute && printRoute()}\n                {\n                    printCurBusesTimes()\n                }\n                {\n                    printBusesTimes()\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import ReactGA from 'react-ga'\n\nconst GA_ID = 'UA-117962911-1';\nconst TEST_MODE = false;\n\nfunction initializeGA() {\n    ReactGA.initialize(GA_ID, { testMode: TEST_MODE });\n    ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nfunction getObjectId(data) {\n    if (data.id !== undefined) {\n        return data.id;\n    } else {\n        return data.value;\n    }\n}\n\nfunction dataToString(data) {\n    let strData;\n    if (Array.isArray(data)) {\n        const l = data.length;\n        if (l > 0) {\n            strData = getObjectId(data[0]).toString();\n            for (let i = 1; i < l; i++) {\n                strData += \",\" + getObjectId(data[i]).toString();\n            }\n        }\n    } else {\n        strData = data\n    }\n    return strData\n}\n\nfunction chooseStation(station) {\n    ReactGA.event({ category: 'Data', action: 'choose station', label: 'stationId:' + dataToString(station) })\n}\n\nfunction changeScreen(screen) {\n    ReactGA.event({ category: 'user', action: 'change screen', label: screen });\n}\n\nfunction chooseBusStation(station, bus) {\n    ReactGA.event({\n        category: 'Data',\n        action: 'choose station and bus',\n        label: 'stationId:' + dataToString(station) + ' busId:' + dataToString(bus)\n    })\n}\n\nexport { initializeGA, chooseStation, chooseBusStation, getObjectId, changeScreen };","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}